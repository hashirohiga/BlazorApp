@page "/tasks"
@using Newtonsoft.Json
@attribute [StreamRendering]

<PageTitle>Tasks</PageTitle>

<h1>Tasks</h1>

<p>This component demonstrates showing data.</p>

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Status_ID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr runat="server" id="list">
                    <td>@task.Id</td>
                    <td><input type="text" value="@task.Name"/></td>
                    <td><input type="text" value="@task.Description"/></td>
                    <td><select>
                        @* <option value="@task.Status_ID" selected ></option> *@
                        @* <option >@task.Status_ID</option>   *@
                        @foreach (var status in statuses)
                            {
                                if (task.Status_ID == status.Id)
                                {
                                <option value="@task.Status_ID" selected>@status.Status_Name</option>    
                                }
                                else
                                {
                                <option >@status.Status_Name</option>      
                                }
                            }
                    </select ></td>
                    <td><button class="btn btn-primary" @onclick="PutAction">Put</button></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    private TasksForecast[]? tasks;
    private StatusesForecast[]? statuses;
    // private static readonly HttpClient client = new HttpClient();

    // private int currentCount = 0;
    static readonly HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {

        try
        {
            using HttpResponseMessage response = await client.GetAsync("http://localhost:5125/api/Tasks");
            response.EnsureSuccessStatusCode();
            string responseBody = await response.Content.ReadAsStringAsync();
            tasks = JsonConvert.DeserializeObject<TasksForecast[]>(responseBody);

            using HttpResponseMessage responseStatuses = await client.GetAsync("http://localhost:5125/api/Statuses");
            responseStatuses.EnsureSuccessStatusCode();
            responseBody = await responseStatuses.Content.ReadAsStringAsync();
            statuses = JsonConvert.DeserializeObject<StatusesForecast[]>(responseBody);

        }
        catch (HttpRequestException e)
        {
        }
    }
    async private void PutAction()
    {

        try
        {
            using HttpResponseMessage response = await client.GetAsync("http://localhost:5125/api/Tasks/1");
            // using StringContent jsonContent = new(
            // JsonSerializer.Serialize(new 
            // {
            //     Id = task.Id,
            //     Name = task.Name,
            //     Description = task.Description,
            //     Status_ID = task.Status_ID
            // }),
            // Encoding.UTF8,
            // "application/json");
            // using HttpResponseMessage response = await client.PutAsync("http://localhost:5125/api/Tasks/1", tasks);
            response.EnsureSuccessStatusCode();
            string responseBody = await response.Content.ReadAsStringAsync();
            // Above three lines can be replaced with new helper method below
            // string responseBody = await client.GetStringAsync(uri);

            Console.WriteLine(responseBody);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("\nException Caught!");
            Console.WriteLine("Message :{0} ", e.Message);
        }
    }

    private class TasksForecast
    {
        public long Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public int Status_ID { get; set; }
    }
    private class StatusesForecast
    {
        public long Id { get; set; }
        public string? Status_Name { get; set;}
    }
}
